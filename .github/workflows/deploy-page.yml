name: GitHub Actions Build and Deploy Page
on:
  push:
    branches:
      - dev
env:
  Project_Name: vmgc
  App_Name: iuku

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: project
        uses: actions/checkout@v3
        with:
          persist-credentials: false # otherwise, the token used is the GITHUB_TOKEN, instead of your personal access token.
          fetch-depth: 0 # otherwise, there would be errors pushing refs to the destination repository.
  
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "16.x"
          registry-url: "https://registry.npmjs.org"
      - run: npm i -g yarn asar

      - name: 读取当前版本号
        id: version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: ./build/electron/package.json
          property: version

      - name: Build Page
        run: |
          echo "use domain ${{ secrets.DOMAIN }} ${{ vars.DOMAIN }}"
          echo "version ${{ steps.version.outputs.value }} "
          rm -rf node_modules && yarn install
          yarn build
          mkdir ./dist/electron
          mv ./build/electron/electron*.js ./dist/electron/
          sed -i "1i\globalThis.AppUpdateUrl='https://ai-peer.github.io/vmgc/apps';\r\n" ./dist/electron/electron.js
          asar pack ./dist app-v${{steps.version.outputs.value}}.asar
          mv app-v${{steps.version.outputs.value}}.asar ./dist
          echo "${{ secrets.DOMAIN }}" >> ./dist/CNAME
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        #uses: actions/upload-artifact@v3
        with:
          # Upload entire repository
          path: "./dist"
          

  # Deployment job
  electron:
    environment:
      name: github-pages
    #runs-on: ubuntu-latest
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest] #windows-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: 读取当前版本号
        id: version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: ./build/electron/package.json
          property: version

      - run: cd ../
      - name: Download build
        uses: actions/download-artifact@v3
        with:
          path: ../
      
      - name: Build Macos and Linux
        if: runner.os == 'Linux' || runner.os == 'macos'
        run: |
          export APP_VERSION=${{ steps.version.outputs.value }}
          export APP_UPDATE_URL=https://ai-peer.github.io/${{ env.Project_Name }}/apps
          cd ../
          cp -r ${{ env.Project_Name }} project
          mv -f ./github-pages ./app
          cp ./project/build/electron/package.json ./
          mkdir ./app/electron
          cp -f ./project/build/electron/afterpack.*.js ./
          cd ./app
          tar -xf artifact.tar && rm -rf artifact.tar
          cd ../
          pwd
          yarn install
          yarn build
          ls
          cd build-app && ls -ls && cd ../
          mkdir artifact

      - name: Copy macos
        if: runner.os == 'Macos'
        run: |
          cd ../
          cp -f build-app/latest-mac.yml artifact/
          cp -f build-app/*.dmg artifact/
          cp -f build-app/*.dmg.blockmap artifact/
          cp -f build-app/*.zip artifact/
          cp -f build-app/*.zip.blockmap artifact/
          
      - name: Copy Linux
        if: runner.os == 'Linux'
        run: |
          cd ../
          cp -f build-app/latest-linux.yml artifact/
          cp -f build-app/*.AppImage artifact/
          cp -f build-app/*.snap artifact/
          cp -f app/app-*.asar artifact/

      - name: Build Windows
        if: runner.os == 'windows'
        run: |
          set APP_VERSION=${{ steps.version.outputs.value }}
          set APP_UPDATE_URL=https://ai-peer.github.io/${{ env.Project_Name }}/apps
          cd ../
          xcopy ${{ env.Project_Name }} project /E/I
          move github-pages app
          copy project\build\electron\package.json .
          mkdir app\electron
          copy project\build\electron\afterpack.*.js .
          cd app
          tar -xf artifact.tar && del artifact.tar
          cd ..
          pwd
          yarn install
          yarn build
          ls
          cd build-app && ls  && cd ..
          mkdir artifact
          copy build-app\latest.yml artifact\
          copy build-app\*.exe artifact\
          copy build-app\*.blockmap artifact\
          copy build-app\*.zip artifact\
          copy build-app\*.appx artifact\

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        #uses: actions/upload-artifact@v3
        with:
          # Upload entire repository
          name: ${{ runner.os }}
          path: "../artifact"

  merge-artifact:
    environment:
      name: github-pages
    runs-on: ubuntu-latest
    needs: [build, electron]
    steps:
      - name: Download
        uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Handle
        run: |
          echo "===========handle github-pages"
          cd github-pages
          tar -xf artifact.tar && rm artifact.tar
          ls
          cd ..
          echo "===========handle linux"
          cd Linux
          tar -xf artifact.tar && rm artifact.tar
          ls
          cd ..
          echo "===========handle macOS"
          cd macOS
          tar -xf artifact.tar && rm artifact.tar
          ls    
          cd ..  
          echo "===========handle Windows"
          cd Windows
          tar -xf artifact.tar && rm artifact.tar
          ls    
          cd .. 

      - name: merge
        run: |
          pwd
          echo "============merge=============="
          ls -lh
          mkdir github-pages/apps
          cp Linux/* github-pages/apps
          cp macOS/* github-pages/apps
          cp Windows/* github-pages/apps
          mv github-pages/*.asar github-pages/apps
          echo "============show github-pages=============="
          cd github-pages && ls -lh
      
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v1
        #uses: actions/upload-artifact@v3
        with:
          # Upload entire repository
          path: "./github-pages"

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: merge-artifact
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2


